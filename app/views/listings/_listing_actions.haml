- is_author = current_user?(@listing.author)
- is_marketplace_admin = Maybe(@current_user).has_admin_rights?.or_else(false)
- is_authorized = is_author || is_marketplace_admin
- show_manage_availability = is_authorized && availability_enabled

- if @listing.closed?
  .listing-view-admin-links
    .listing-view-admin-link
      .icon-with-text-container
        = icon_tag("lock", ["icon-part"])
        .text-part= t("listings.reply_link.listing_closed")
    - if is_authorized
      .listing-view-admin-link
        %a.action-link{href: edit_listing_path(@listing)}
          .icon-with-text-container
            = icon_tag("unlock", ["icon-part"])
            .text-part= t("listings.edit_links.reopen_listing")
- else

  - if is_author
    = render partial: "delivery_opts", locals: { delivery_opts: delivery_opts, is_author: is_author }
  - else

    = form_tag form_path, :method => :get, :id => "booking-dates" do

      - if [:day, :night].include?(@listing.quantity_selector&.to_sym)
        / # - blocked_dates_result.on_success do |blocked_dates|
        - days = [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday, :sunday]
        - months = [:january, :february, :march, :april, :may, :june, :july, :august, :september, :october, :november, :december]
        - translated_days = days.map { |day_symbol| t("datepicker.days.#{day_symbol}") }.to_json
        - translated_days_short = days.map { |day_symbol| t("datepicker.days_short.#{day_symbol}") }.to_json
        - translated_days_min = days.map { |day_symbol| t("datepicker.days_min.#{day_symbol}") }.to_json
        - translated_months = months.map { |day_symbol| t("datepicker.months.#{day_symbol}") }.to_json
        - translated_months_short = months.map { |day_symbol| t("datepicker.months_short.#{day_symbol}") }.to_json

        - content_for :extra_javascript do
          :javascript

            var disabledDates = [
              #{bookings.map { |d| "new Date(#{d.to_i * 1000})" }.join(",")}
            ];

            $.fn.datepicker.dates['#{I18n.locale}'] = {
              days: #{raw translated_days},
              daysShort: #{raw translated_days_short},
              daysMin: #{raw translated_days_min},
              months: #{raw translated_months},
              monthsShort: #{raw translated_months_short},
              today: "#{t("datepicker.today")}",
              weekStart: #{t("datepicker.week_start", default: 0)},
              clear: "#{t("datepicker.clear")}",
              format: "#{t("datepicker.format")}"
            }
            $.validator.addMethod("night_selected",
              function(value, element, params) {
                var startVal = $(params.startOnSelector).val()
                if (!!startVal == false) {
                  return true;
                } else {
                  return startVal !== value
                }
              });
            $.validator.addMethod("availability_range",
              function(value, element, params) {
                var startVal = $(params.startOnSelector).datepicker('getDates');
                var endVal = $(element).datepicker('getDates');

                if (!startVal || startVal.length !== 1 || !endVal || endVal.length !== 1) {
                  return false;
                }

                var startDate = startVal[0].getTime();
                var endDate = endVal[0].getTime();

                // Validate that all booked dates are outside the selected range
                return disabledDates.every(function(d) {
                  var date = d.getTime();
                  if (startDate === endDate) {
                    return date !== startDate;
                  }
                  return date < startDate || date >= endDate;
                });
              });
            var rules = #{@listing.quantity_selector&.to_sym == :night} ? {
              "end_on": {
                night_selected: {startOnSelector: "#start-on"},
                availability_range: {startOnSelector: "#start-on"}
              }
            } : {
              "end_on": {
                availability_range: {startOnSelector: "#start-on"}
              }
            };
            $("#booking-dates").validate({
              rules: rules,
              submitHandler: function(form) {
                var $form = $(form);
                $form.find("#start-on").attr("name", "");
                $form.find("#end-on").attr("name", "");

                form.submit();
              }
            });

            var endDate = new Date(#{blocked_dates_end_on.to_i * 1000});
            var nightPicker = #{@listing.quantity_selector.to_sym == :night};

            window.ST.initializeFromToDatePicker('datepicker', {disabledDates: disabledDates, endDate: endDate, nightPicker: nightPicker });
        .input-daterange.input-group.clearfix#datepicker{:data => {:locale => I18n.locale, :dateformat => t("datepicker.format")}}
          .datepicker-start-wrapper
            = label_tag t(".booking_from")
            %input.input-sm.form-control.required#start-on{:type => 'text', :name => "start_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-start-output" } }
            %input#booking-start-output{:type => 'hidden', :name => 'start_on'}

          .datepicker-end-wrapper
            = label_tag t(".booking_to")
            %input.input-sm.form-control.required#end-on{:type => 'text', :name => "end_on", :placeholder => t("datepicker.format"), :data => { :output => "booking-end-output" }}
            %input#booking-end-output{:type => 'hidden', :name => 'end_on'}

        - blocked_dates_result.on_error do
          = t("listings.listing_actions.unable_load_availability")

      - elsif listing_unit_type.present?
        - delivery_type = delivery_opts.length > 0 ? delivery_opts.first[:name].to_s : ""
        - shipping_price_additional = delivery_opts.length > 0 ? delivery_opts.first[:shipping_price_additional] : nil
        - content_for :extra_javascript do
          :javascript
            $("#booking-dates").validate({
              errorPlacement: function(error, element) {
                if (element.is("#quantity")) {
                  error.insertAfter(".quantity-wrapper");
                } else {
                  error.insertAfter(element);
                }
              }
            });
            window.ST.initializeQuantityValidation({validate: "positiveIntegers", input: "quantity", errorMessage: "#{t("errors.messages.positive_number")}" });
            if ("#{delivery_type}" == "shipping" && #{shipping_price_additional != nil}) {
              window.ST.initializeShippingPriceTotal(#{raw currency_opts.to_json}, '#quantity', '.delivery-price-value');
            }

        .quantity-wrapper.input-group.clearfix
          .quantity-label-wrapper
            %label.quantity-label{for: 'quantity'}
              = ListingViewUtils.translate_quantity(@listing.unit_type, @listing.unit_selector_tr_key)
          .quantity-input.input-sm.required
            %input#quantity{type: 'number', placeholder: t("listings.quantity_placeholder"), name: 'quantity', value: 1, min: 1, step: 1}

      = render partial: "delivery_opts", locals: { delivery_opts: delivery_opts, is_author: is_author }

      = hidden_field_tag(:listing_id, @listing.id)

      - blocked_dates_result.on_success do
        %button.enabled-book-button
          .content
            = action_button_label(@listing)

      - blocked_dates_result.on_error do
        %button.disabled-book-button{disabled: true}
          .content
            = action_button_label(@listing)

    - if payment_gateway == :paypal && process != :none
      .row
        .col-12
          = render :partial => "listing_conversations/paypal_payment_methods", locals: { country_code: country_code }

  - if is_authorized
    .listing-view-admin-links
      .listing-view-admin-link
        %a.icon-with-text-container{href: edit_listing_path(@listing)}
          = icon_tag("edit", ["icon-part"])
          .text-part= t("listings.edit_links.edit_listing")
      - if show_manage_availability
        - availability_link_id = "edit-listing-availability-#{SecureRandom.urlsafe_base64(5)}"
        .listing-view-admin-link
          %a.icon-with-text-container{id: availability_link_id, href: "#manage-availability"}
            = icon_tag("calendar", ["icon-part"])
            .text-part= t("web.listings.edit_listing_availability")
          = react_component("ManageAvailabilityApp", props: manage_availability_props.merge({ availability_link_id: availability_link_id }), prerender: false)
      .listing-view-admin-link
        %a.icon-with-text-container{href: close_person_listing_path(@current_user, @listing), data: { method: "put", remote: "true"}}
          = icon_tag("lock", ["icon-part"])
          .text-part= t("listings.edit_links.close_listing")

      - if is_marketplace_admin
        .listing-view-admin-link
          = link_to move_to_top_person_listing_path(@current_user, @listing), data: { method: "put" } do
            .icon-with-text-container
              = icon_tag("star", ["icon-part"])
              .text-part= t("listings.edit_links.move_to_top")

        .listing-view-admin-link
          = link_to show_in_updates_email_person_listing_path(@current_user, @listing), data: { method: "put", remote: "true" }, :id => "add-to-updates-email"  do
            .icon-with-text-container
              = icon_tag("mail", ["icon-part"])
              .text-part#add-to-updates-email-text{data: {:"action-loading" => t("listings.edit_links.show_in_updates_email_loading"), :"action-error" => t("listings.edit_links.show_in_updates_email_error"), :"action-success"=> t("listings.edit_links.show_in_updates_email_success")}}= t("listings.edit_links.show_in_updates_email")
